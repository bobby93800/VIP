from instagrapi import Client

from instagrapi.exceptions import LoginRequired, ChallengeRequired

import random

import time

from datetime import datetime

import json

import os

import logging



# Configuration

USERNAME = os.getenv('INSTA_USERNAME', "gaurav_lancer1")  # Use environment variables

PASSWORD = os.getenv('INSTA_PASSWORD', "anita1234@1") 

SESSION_FILE = "instagram_session.json"

LOG_FILE = "bot_activity.log"



# More natural-looking reply options

RANDOM_REPLIES = [

    " TUM TO WAHI HO NA JISE 6000 ME RUSSIAN CHAHIYE ЁЯднЁЯдн@{username}! ",

    "I LOVE YOU JAANU тЩея╕П @{username}! ЁЯТЦ",

    "HAM LOGO KE MAMMY PAPA JANTE HAI ЁЯШЖ",

    """

ЁЯФетХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧЁЯФе

       EVERYONE FOLLOW THE GROUP RULES 

ЁЯФетХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭЁЯФе



тЪбя╕П ЁЭЯЩ. ЁЭРНЁЭРО ЁЭРТЁЭРДЁЭРЛЁЭРЕ-ЁЭРПЁЭРСЁЭРОЁЭРМЁЭРО!

   тЦ╕ ЁЭЧбЁЭЧ╝ ЁЭЧоЁЭЧ▒ЁЭША, ЁЭЧ╗ЁЭЧ╝ ЁЭЧпЁЭШВЁЭШАЁЭЧ╢ЁЭЧ╗ЁЭЧ▓ЁЭШАЁЭША ЁЭЧ▒ЁЭЧ║ЁЭША, ЁЭЧ╗ЁЭЧ╝ ЁЭЧпЁЭЧ▓ЁЭЧ┤ЁЭЧ┤ЁЭЧ╢ЁЭЧ╗ЁЭЧ┤

   тЦ╕ ЁЭЧйЁЭЧ╢ЁЭЧ╝ЁЭЧ╣ЁЭЧоЁЭШБЁЭЧ╝ЁЭЧ┐ЁЭША ЁЭШДЁЭЧ╢ЁЭЧ╣ЁЭЧ╣ ЁЭЧпЁЭЧ▓ ЁЭЧШЁЭЧлЁЭЧЬЁЭЧЯЁЭЧШЁЭЧЧ



ЁЯТв ЁЭЯЪ. ЁЭРТЁЭРЦЁЭРДЁЭРАЁЭРС ЁЭРИЁЭРН ЁЭРМЁЭРОЁЭРГЁЭРДЁЭРСЁЭРАЁЭРУЁЭРИЁЭРОЁЭРН

   тЦ╕ ЁЭЧЪЁЭЧоЁЭЧ╣ЁЭЧ╢ ЁЭЧ╝ЁЭЧ╕, ЁЭЧпЁЭШВЁЭШБ ЁЭЧ╗ЁЭЧ╝ ЁЭЧ▓ЁЭШЕЁЭШБЁЭЧ┐ЁЭЧ▓ЁЭЧ║ЁЭЧ▓ ЁЭШБЁЭЧ╝ЁЭШЕЁЭЧ╢ЁЭЧ░ЁЭЧ╢ЁЭШБЁЭШЖ

   тЦ╕ ЁЭЧЧЁЭЧ╝ЁЭЧ╗'ЁЭШБ ЁЭЧпЁЭЧ▓ ЁЭЧо ЁЭЧ╜ЁЭЧ▓ЁЭШАЁЭШБ



ЁЯСС ЁЭЯЫ. ЁЭРАЁЭРГЁЭРМЁЭРИЁЭРНЁЭРТ ЁЭРАЁЭРСЁЭРД ЁЭРСЁЭРОЁЭРШЁЭРАЁЭРЛЁЭРУЁЭРШ

   тЦ╕ ЁЭЧбЁЭЧ╝ ЁЭЧ▒ЁЭЧ╢ЁЭШАЁЭЧ┐ЁЭЧ▓ЁЭШАЁЭЧ╜ЁЭЧ▓ЁЭЧ░ЁЭШБ, ЁЭЧ╗ЁЭЧ╝ ЁЭЧ╜ЁЭЧ▓ЁЭЧ┐ЁЭШАЁЭЧ╝ЁЭЧ╗ЁЭЧоЁЭЧ╣ ЁЭЧ╖ЁЭЧоЁЭЧпЁЭША

   тЦ╕ ЁЭЧаЁЭЧиЁЭЧжЁЭЧз ЁЭЧЩЁЭЧвЁЭЧЯЁЭЧЯЁЭЧвЁЭЧк:

      тЬ╖ @usetname

      тЬ╖ @username

      тЬ╖ @username

      тЬ╖ @username



ЁЯТО ЁЭЯЬ. ЁЭРСЁЭРДЁЭРТЁЭРПЁЭРДЁЭРВЁЭРУ ЁЭРИЁЭРТ ЁЭРМЁЭРАЁЭРНЁЭРГЁЭРАЁЭРУЁЭРОЁЭРСЁЭРШ

   тЦ╕ ЁЭЧбЁЭЧ╝ ЁЭЧ┐ЁЭЧоЁЭЧ░ЁЭЧ╢ЁЭШАЁЭЧ║, ЁЭЧ╗ЁЭЧ╝ ЁЭЧпЁЭШВЁЭЧ╣ЁЭЧ╣ЁЭШЖЁЭЧ╢ЁЭЧ╗ЁЭЧ┤

   тЦ╕ ЁЭЧкЁЭЧ▓'ЁЭЧ┐ЁЭЧ▓ ЁЭЧоЁЭЧ╣ЁЭЧ╣ ЁЭЧ╡ЁЭЧ▓ЁЭЧ┐ЁЭЧ▓ ЁЭЧ│ЁЭЧ╝ЁЭЧ┐ ЁЭЧ│ЁЭШВЁЭЧ╗



ЁЯОи ЁЭЯЭ. ЁЭРУЁЭРЗЁЭРДЁЭРМЁЭРД ЁЭРИЁЭРТ ЁЭРТЁЭРАЁЭРВЁЭРСЁЭРДЁЭРГ

   тЦ╕ ЁЭЧЧЁЭЧ╝ЁЭЧ╗'ЁЭШБ ЁЭШБЁЭЧ╝ЁЭШВЁЭЧ░ЁЭЧ╡ ЁЭШБЁЭЧ╡ЁЭЧ▓ ЁЭЧ╜ЁЭЧ│ЁЭЧ╜/ЁЭЧпЁЭЧ╢ЁЭЧ╝

   тЦ╕ ЁЭЧзЁЭЧ╡ЁЭЧ╢ЁЭША ЁЭЧ╢ЁЭША ЁЭЧ╝ЁЭШВЁЭЧ┐ ЁЭЧ╢ЁЭЧ▒ЁЭЧ▓ЁЭЧ╗ЁЭШБЁЭЧ╢ЁЭШБЁЭШЖ



тЪб ЁЭЯЮ. ЁЭРАЁЭРГЁЭРМЁЭРИЁЭРН ЁЭРГЁЭРДЁЭРВЁЭРИЁЭРТЁЭРИЁЭРОЁЭРНЁЭРТ ЁЭРАЁЭРСЁЭРД ЁЭРЕЁЭРИЁЭРНЁЭРАЁЭРЛ

   тЦ╕ ЁЭЧбЁЭЧ╝ ЁЭЧ╗ЁЭЧ▓ЁЭЧ┤ЁЭЧ╝ЁЭШБЁЭЧ╢ЁЭЧоЁЭШБЁЭЧ╢ЁЭЧ╗ЁЭЧ┤, ЁЭЧ╗ЁЭЧ╝ ЁЭШДЁЭЧ╡ЁЭЧ╢ЁЭЧ╗ЁЭЧ╢ЁЭЧ╗ЁЭЧ┤

   тЦ╕ ЁЭЧзЁЭЧ╡ЁЭЧ▓ЁЭЧ╢ЁЭЧ┐ ЁЭШДЁЭЧ╝ЁЭЧ┐ЁЭЧ▒ ЁЭЧ╢ЁЭША ЁЭЧ╣ЁЭЧоЁЭШД



тЪая╕ПтХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧтЪая╕П

      ЁЭРБЁЭРСЁЭРДЁЭРАЁЭРК ЁЭРСЁЭРФЁЭРЛЁЭРДЁЭРТ = ЁЭРПЁЭРФЁЭРНЁЭРИЁЭРТЁЭРЗЁЭРМЁЭРДЁЭРНЁЭРУ

тЪая╕ПтХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭтЪая╕П



ЁЯТА 1st offense: Warning

ЁЯТА 2nd offense: Mute

ЁЯТА 3rd offense: Permanent Ban



ЁЯФе ЁЭРДЁЭРЧЁЭРУЁЭРСЁЭРА ЁЭРНЁЭРОЁЭРУЁЭРДЁЭРТ:

- ЁЭЧФЁЭЧ▒ЁЭЧ║ЁЭЧ╢ЁЭЧ╗'ЁЭША ЁЭЧ┤ЁЭЧ│ ЁЭШАЁЭШБЁЭЧоЁЭШБЁЭШВЁЭША ЁЭЧ╢ЁЭША ЁЭЧо ЁЭЧ║ЁЭЧ▓ЁЭЧ╗ЁЭШАЁЭЧ╢ЁЭШБЁЭЧ╢ЁЭШГЁЭЧ▓ ЁЭШБЁЭЧ╝ЁЭЧ╜ЁЭЧ╢ЁЭЧ░ (ЁЭЧ╢ЁЭЧ│ ЁЭШБЁЭЧ╡ЁЭЧ▓ЁЭЧ┐ЁЭЧ▓ ЁЭЧ▓ЁЭШГЁЭЧ▓ЁЭЧ╗ ЁЭЧ╢ЁЭША ЁЭЧ╝ЁЭЧ╗ЁЭЧ▓) ЁЯШП

- ЁЭЧзЁЭЧ╡ЁЭЧ╢ЁЭША ЁЭЧ╢ЁЭША ЁЭЧо ЁЭЧ│ЁЭШВЁЭЧ╗ ЁЭШЗЁЭЧ╝ЁЭЧ╗ЁЭЧ▓, ЁЭЧпЁЭШВЁЭШБ ЁЭШДЁЭЧ╢ЁЭШБЁЭЧ╡ ЁЭЧ╝ЁЭЧ┐ЁЭЧ▒ЁЭЧ▓ЁЭЧ┐



    """

    "рддреБрдореНрд╣рд╛рд░реА рдореБрд╕реНрдХрд╛рди рджреЗрдЦрдХрд░ рдореЗрд░рд╛ Windows рднреА рд╣реИрдВрдЧ рд╣реЛ рдЧрдпрд╛! ЁЯШВ @{username}",

    "рддреБрдо Google рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдХреБрдЫ рднреА Search рдирд╣реАрдВ рд╣реЛрддрд╛! ЁЯФН @{username}",

    "рддреБрдо WiFi рд╣реЛ? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореЗрд░рд╛ Signal Weak рд╣реИ! ЁЯУ╢ @{username}",

    "рддреБрдо Traffic рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рдордиреЗ рдореЗрд░реА Speed рдХрдо рд╣реЛ рдЬрд╛рддреА рд╣реИ! ЁЯЪжЁЯШЖ @{username}",

    

    # Romantic

    "рддреБрдо рдЪрд╛рдп рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рд╕реБрдмрд╣-рд╕реБрдмрд╣ рддреБрдореНрд╣рд╛рд░реА рдпрд╛рдж рдЖрддреА рд╣реИ! тШХ @{username}",

    "рдореИрдВ ATM рдирд╣реАрдВ рд╣реВрдБ, рдкрд░ рддреБрдо рдореЗрд░реЗ рджрд┐рд▓ рд╕реЗ рдкреНрдпрд╛рд░ рдирд┐рдХрд╛рд▓ рд╕рдХрддреА рд╣реЛ! ЁЯТЦ @{username}",

    "рддреБрдореНрд╣рд╛рд░реА рдЖрдБрдЦреЛрдВ рдореЗрдВ рдЗрддрдиреЗ рд╕рдкрдиреЗ рд╣реИрдВ, рдореИрдВ рдЙрдиреНрд╣реЗрдВ рдкреВрд░рд╛ рдХрд░ рджреВрдБрдЧрд╛! тЬи @{username}",

    "рддреБрдо Starbucks рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореЗрд░реА рд╕реБрдмрд╣ Incomplete рд╣реИ! тШХтЭдя╕П @{username}",

    

    # Cheeky/Double Meaning

    "рддреБрдо UPS рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдЖрддреЗ рд╣реА рдореЗрд░рд╛ Current рдмреЭ рдЬрд╛рддрд╛ рд╣реИ! тЪбЁЯШП @{username}",

    "рддреБрдо Ola рд╣реЛ? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рдореИрдВ Cashless рд╣реЛ рдЬрд╛рдКрдБрдЧрд╛! ЁЯТ░ЁЯШВ @{username}",

    "рддреБрдо Bluetooth рд╣реЛ? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рдореЗрд░рд╛ Connection Automatic рд╣реИ! ЁЯУ▓ЁЯТЩ @{username}",

    "рддреБрдо Gym рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореЗрд░рд╛ Motivation рд╣реА рдирд╣реАрдВ рд░рд╣рддрд╛! ЁЯТкЁЯШП @{username}",

    

    # Bollywood Style

    "рддреБрдо Mere Khwabon Mein Aao... рд╡реЛрд╣ рдирд╣реАрдВ, Real Mein! ЁЯШН @{username}",

    "рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореЗрд░реА Life рд╡реИрд╕реА рд╣реА рд╣реИ рдЬреИрд╕реЗ рдмрд┐рдирд╛ рдЧрд╛рдиреЛрдВ рд╡рд╛рд▓реА Movie! ЁЯОм @{username}",

    "рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рдореИрдВ Jio рдХрд╛ Saal ka Plan рднреА рд▓реЗ рдЖрдпрд╛! ЁЯУЕтЭдя╕П @{username}",

    

    # Foodie

    "рддреБрдо Pizza рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореЗрд░реА Life Cheesy рдирд╣реАрдВ! ЁЯНХтЭдя╕П @{username}",

    "рддреБрдо Chocolate рд╣реЛ? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореЗрд░рд╛ рдореВрдб Melt рдирд╣реАрдВ рд╣реЛрддрд╛! ЁЯНлЁЯФе @{username}",

    "рддреБрдо Cold Drink рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рдореЗрд░рд╛ Temperature рдмрдврд╝ рдЬрд╛рддрд╛ рд╣реИ! ЁЯедЁЯШЙ @{username}",

    

    # Techy

    "рддреБрдо 5G рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рдордиреЗ рдореЗрд░рд╛ рджрд┐рд▓ Loading рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ! ЁЯУ╢ЁЯШЙ @{username}",

    "рддреБрдо Netflix рд╣реЛ? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рд╣рд░ Moment рдмрд┐рдирд╛ Buffering рдХреЗ рдЪрд▓рддрд╛ рд╣реИ! ЁЯОмЁЯТЦ @{username}",

    "рддреБрдо Password рд╣реЛ рдХреНрдпрд╛? рдХреНрдпреЛрдВрдХрд┐ рддреБрдореНрд╣рд╛рд░реЗ рдмрд┐рдирд╛ рдореИрдВ Login рдирд╣реАрдВ рд╣реЛ рдкрд╛рддрд╛! ЁЯФСЁЯТШ @{username}"

]



IGNORE_USERS = ["user1", "user2"]  # Users to never reply to

MIN_REPLY_DELAY = 300  # Minimum seconds between replies (to appear human)

MAX_REPLY_DELAY = 301  # Maximum seconds between replies



class InstantGroupReplyBot:

    def __init__(self):

        self.client = Client()

        self.replied_messages = set()  # Track individual messages instead of threads

        self.setup_logging()

        self.setup_client()

        

    def setup_logging(self):

        """Configure logging to file and console"""

        logging.basicConfig(

            level=logging.INFO,

            format='%(asctime)s - %(levelname)s - %(message)s',

            handlers=[

                logging.FileHandler(LOG_FILE),

                logging.StreamHandler()

            ]

        )

        self.log = logging.getLogger(__name__)

        

    def setup_client(self):

        """Configure client with updated settings"""

        settings = {

            "user_agent": "Instagram 275.0.0.27.98 Android (28/9.0; 480dpi; 1080x2260; OnePlus; ONEPLUS A6013; OnePlus6T; qcom; en_US; 314665256)",

            "device_settings": {

                "manufacturer": "OnePlus",

                "model": "ONEPLUS A6013",

                "android_version": 28,

                "android_release": "9.0",

                "chipset": "qualcomm"

            },

            "app_version": "275.0.0.27.98",

            "android_version": 28,

            "android_release": "9.0",

            "locale": "en_US",

            "country": "US",

            "timezone_offset": 19800,

            "request_timeout": 10  # Faster timeout for quicker checks

        }

        self.client.set_settings(settings)



    def load_session(self):

        """Load saved session if exists"""

        if os.path.exists(SESSION_FILE):

            try:

                self.client.load_settings(SESSION_FILE)

                return True

            except Exception as e:

                self.log.error(f"Failed to load session: {e}")

        return False



    def save_session(self):

        """Save current session"""

        try:

            self.client.dump_settings(SESSION_FILE)

            return True

        except Exception as e:

            self.log.error(f"Failed to save session: {e}")

            return False



    def login(self):

        """Handle login with session management"""

        try:

            # Try loading existing session first

            if self.load_session():

                try:

                    # Lightweight check instead of full timeline fetch

                    self.client.account_info()

                    self.log.info("Logged in via existing session")

                    return True

                except (LoginRequired, ChallengeRequired):

                    self.log.info("Session expired, relogging in...")

            

            # Full login required

            time.sleep(3)  # Reduced delay for faster startup

            login_result = self.client.login(USERNAME, PASSWORD)

            

            if login_result:

                self.log.info("Login successful!")

                self.save_session()

                return True

            return False

            

        except Exception as e:

            self.log.error(f"Login failed: {e}")

            if "challenge_required" in str(e):

                self.log.error("Please check your Instagram app for verification")

            return False



    def get_random_reply(self, username):

        """Select a random reply template"""

        return random.choice(RANDOM_REPLIES).format(username=username)



    def process_group_messages(self):

        """Find and reply to unread group messages instantly"""

        try:

            # Get only unread threads for faster processing

            threads = self.client.direct_threads(selected_filter="unread")

            

            for thread in threads:

                if not thread.is_group:

                    continue

                    

                if not thread.messages:

                    continue

                    

                # Process all unread messages, not just the last one

                for message in thread.messages:

                    if message.id in self.replied_messages:

                        continue

                        

                    sender_id = message.user_id

                    

                    if sender_id == self.client.user_id:

                        continue

                        

                    try:

                        user_info = self.client.user_info(sender_id)

                        username = user_info.username

                    except Exception as e:

                        self.log.error(f"Couldn't get user info: {e}")

                        continue

                    

                    if username in IGNORE_USERS:

                        continue

                    

                    # Generate reply with random delay

                    reply = self.get_random_reply(username)

                    delay = random.uniform(MIN_REPLY_DELAY, MAX_REPLY_DELAY)

                    time.sleep(delay)

                    

                    try:

                        self.client.direct_send(reply, thread_ids=[thread.id])

                        self.log.info(f"Replied to @{username} in group (after {delay:.1f}s): {reply}")

                        self.replied_messages.add(message.id)

                        

                        # Mark as read after replying

                        self.client.direct_thread_mark_read(thread.id)

                        

                    except Exception as e:

                        self.log.error(f"Failed to send reply: {e}")



        except Exception as e:

            self.log.error(f"Error processing messages: {e}")

            time.sleep(30)  # Shorter delay on errors for faster recovery



    def run(self):

        """Main bot execution loop with faster checks"""

        if not self.login():

            self.log.error("Cannot continue without login")

            return

            

        self.log.info("Instant group message reply bot started! Press Ctrl+C to stop")

        self.log.info(f"Loaded {len(RANDOM_REPLIES)} reply options")

        

        try:

            while True:

                start_time = time.time()

                self.log.info("Checking for new group messages...")

                self.process_group_messages()

                

                # Dynamic sleep based on processing time

                processing_time = time.time() - start_time

                sleep_time = max(5, 15 - processing_time)  # Minimum 5s between checks

                time.sleep(sleep_time)

                

        except KeyboardInterrupt:

            self.log.info("\nBot stopped by user")

            self.save_session()



if __name__ == "__main__":

    # Clear console for cleaner output

    os.system('cls' if os.name == 'nt' else 'clear')

    

    bot = InstantGroupReplyBot()

    bot.run()

